import{_ as s,c as a,o as t,V as e}from"./chunks/framework.6DK9nIBo.js";const m=JSON.parse('{"title":"Document 文档","description":"","frontmatter":{},"headers":[],"relativePath":"zh/core/document.md","filePath":"zh/core/document.md","lastUpdated":1715168719000}'),n={name:"zh/core/document.md"},i=e(`<h1 id="document-文档" tabindex="-1">Document 文档 <a class="header-anchor" href="#document-文档" aria-label="Permalink to &quot;Document 文档&quot;">​</a></h1><p>在 Agents-Flex 中，<code>Document</code> 是一个带有向量数据的文档对象。其定义如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Document</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VectorData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 文档 ID</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object id;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 文档内容</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String content;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>id：文档 id</li><li>content：文档内容</li></ul><p>由于其带有向量数据，因此可以被存储在向量数据库（VectorStore）中。</p><p>在文档模块了，除了 <code>Document</code> 本身以外，还提供了如下几种组件：</p><ul><li><strong>DocumentLoader</strong>：文档加载器，用于从不同的地方加载（读取）内容（比如 本地磁盘、数据库、网站 等）文档内容。</li><li><strong>DocumentParser</strong>：文档解析器，用于对不同类型的文档进行解析，最终得到 <code>Document</code> 对象，比如解析 word、pdf、html 等等。</li><li><strong>DocumentSplitter</strong>：文档分割器，用于对大文档进行分割，生成多个小文档，方便 Embedding 计算以及向量数据库存储。</li></ul><h2 id="documentloader-文档加载器" tabindex="-1">DocumentLoader 文档加载器 <a class="header-anchor" href="#documentloader-文档加载器" aria-label="Permalink to &quot;DocumentLoader 文档加载器&quot;">​</a></h2><p>在 Agents-Flex 中，提供了如下两种文档加载器（未来会提供更多的类型）：</p><ul><li><strong>FileDocumentLoader</strong>： 文件文档加载器</li><li><strong>HttpDocumentLoader</strong>： http 文档加载器</li></ul><p>未来我们会新增更多类型的文档加载器，比如数据库加载、FTP 加载。或者特定的领域的加载器，比如微信公众号加载器等。用户也可以实现自己的加载，欢迎大家参与和分享。</p><h2 id="documentparser-文档解析器" tabindex="-1">DocumentParser 文档解析器 <a class="header-anchor" href="#documentparser-文档解析器" aria-label="Permalink to &quot;DocumentParser 文档解析器&quot;">​</a></h2><p>文档解析器用于对不同类型的文档进行解析，最终得到 <code>Document</code> 对象，Agents-Flex 已内置的文档解析器如下：</p><ul><li><strong>PdfBoxDocumentParser</strong>：对 PDF 解析</li><li><strong>PoiDocumentParser</strong>：对 word 文档进行解析</li></ul><h2 id="documentsplitter-文档分割器" tabindex="-1">DocumentSplitter 文档分割器 <a class="header-anchor" href="#documentsplitter-文档分割器" aria-label="Permalink to &quot;DocumentSplitter 文档分割器&quot;">​</a></h2><p>文档分割器是用对对大文档进行分割为多个小文档的场景，不同的分割器可以用于不同的分割场景。目前 Agents-Flex 的提供的文档分割器如下：</p><ul><li><strong>SimpleDocumentSplitter</strong>：可以通过正则表达式进行分割</li><li><strong>MarkdownDocumentSplitter</strong>：对 Markdown 内容进行分割</li><li><strong>ParagraphDocumentSplitter</strong>：通过段落进行分割</li></ul>`,17),l=[i];function o(r,p,c,d,h,u){return t(),a("div",null,l)}const g=s(n,[["render",o]]);export{m as __pageData,g as default};
